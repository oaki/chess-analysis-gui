{"version":3,"sources":["webpack:///./components/openingExplorer/openingExplorer.tsx","webpack:///./components/evaluation/evaluation.tsx","webpack:///./components/syzygyExplorer/syzygyExplorer.tsx","webpack:///./components/gamesDatabaseExplorer/gamesDatabaseExplorer.tsx","webpack:///./components/history/moveNumber.tsx","webpack:///./components/history/moves.tsx","webpack:///./components/history/history.tsx","webpack:///./components/evaluation/useStockFish.tsx","webpack:///./components/hooks/useInterval.tsx","webpack:///./components/evaluation/offlineStockfishEvaluation.tsx","webpack:///./components/Panel.tsx","webpack:///./components/infoPanel/infoPanel.tsx","webpack:///./libs/chessboardUtils.ts","webpack:///./components/chessboard/onMoveIndication.tsx","webpack:///./tools/isYourMove.ts","webpack:///./components/hooks/useRefCallback.tsx","webpack:///./libs/moveFen.ts","webpack:///./libs/autoplayEngine.ts","webpack:///./components/chessboard/board.tsx","webpack:///./components/chessboard/chessboardController.tsx","webpack:///./hooks/useScreenOrientation.tsx","webpack:///./layouts/chessboardPage.tsx"],"names":["TableTr","handleMove","moves","handleClick","e","preventDefault","currentTarget","dataset","move","map","item","index","key","onClick","san","weight","StyledExplorerBox","div","StyledTable","table","SmartOpeningExplorer","state","openingMoves","fen","store","dispatch","from","substring","to","id","tree","getCounter","length","ChessInstance","EvalHeader","props","className","name","getNodes","evaluation","getTime","formatNumber","tbhits","EvalLine","time1","performance","now","pv","load","splitPv","newMoves","i","newMove","sloppy","console","log","annotationMove","push","prepareEvaluation","time2","getScore","SmartEvaluation","evaluations","Eval","score","Number","mate","nodes","time","toFixed","num","n","split","renderMoves","handleClickMove","uci","SyzygyExplorer","syzygy","winMoves","filter","wdl","drawMoves","losingMoves","SyzygyExplorerSmart","getState","promotion","StyledGamesWrapper","GamesDatabaseExplorer","colSpan","isLoading","response","games","game","style","color","white","whiteElo","black","blackElo","fewNextMove","join","result","renderRow","SmartGamesDatabaseExplorer","gameDatabase","MoveNumber","counter","tokens","moveNumber","isBlack","Variants","variants","variant","Moves","level","handleMoveClick","showBracket","lastMoveId","moveIndex","showLeftBracket","showRightBracket","Fragment","shortNotation","HistoryContainer","history","HistoryWrapper","ref","getReference","node","previousEvaluation","prevMove","getPrevMove","prevEvaluations","History","engineMsgBuffer","collectEngineData","msg","multipv","data","useStockFishWorker","lastFen","movesLine","callback","delay","savedCallback","worker","setWorker","error","setError","setEvaluations","threads","hashSize","multiPv","workerConfig","values","Object","keys","evaluationStringFromEngine","current","setInterval","clearInterval","window","Worker","Error","instance","WebAssembly","validate","Uint8Array","of","path","addEventListener","postMessage","terminate","SmartStockFish","doEvaluation","setState","defaultChecked","icons","onChange","OfflineStockFishEvaluation","getMoveLine","Panel","panelTab","INFO_TAB","EVALUATION_TAB","BOOK_TAB","Wrapper","SmartPanel","classNames","InfoPanel","renderButton","Container","Column","depth","renderScore","handleButton","event","tabId","tab","IconComponent","classname","is_active","height","width","span","SmartInfoPanel","onMove","isFlip","isOnline","settings","toDests","chess","dests","SQUARES","forEach","s","ms","square","verbose","m","toColor","turn","OnMoveIndication","classnames","WHITE","Boolean","BLACK","useRefCallback","setNode","element","getMoveFen","previousFen","storeListener","autoplay","loading","AutoplayService","isAiOnMove","openingMove","getOpeningMove","dispatchOpeningMove","dispatchEngineMove","this","debounceListener","subscribe","moveObj","isScoreHigh","toMate","Math","abs","isImported","import","sumWeight","reduce","sum","average","ceil","possibleMoves","randomItem","items","floor","random","useBoard","setRef","board","setBoard","chessGround","orientation","highlight","check","lastMove","addPieceZIndex","movable","free","redrawAll","set","events","after","cg","orig","dest","previousHash","getStateHash","saveHistory","user","token","getToken","lastGameId","saveGame","currentHash","onResize","handlePromotePiece","propsSetMove","piece","isOpen","possibleKeys","isBoardKey","includes","Orientation","SmartAwesomeChessboard","reduxState","promotionDialog","options","in_check","turnColor","selected","moveColor","status","in_checkmate","in_draw","updateStatus","p","setShapes","brush","handleOnClick","getOrientation","innerWidth","innerHeight","landscape","portrait","ChessboardPage","setWrapperRef","setOrientation","updateOrientation","removeEventListener","useScreenOrientation","isLandscape","showMainMenu","showFlip","showUndo","showRedo","showAutoplay","StyledWrapper","chessboardHeight","appHeight","overflow"],"mappings":"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","file":"3.d6c523fe24f94f3795f7.js","sourcesContent":["import React, {FC, memo, useCallback} from \"react\";\nimport {shallowEqual, useSelector} from \"react-redux\";\nimport store from \"../../store\";\nimport {setMove} from \"../history/historyReducers\";\nimport {treeService} from \"../moveTree/tree\";\nimport \"../../assets/css/explorerBox.css\";\nimport {IOpeningMove} from \"./openingExplorerReducers\";\nimport styled from \"@emotion/styled\";\nimport {IState} from \"interfaces\";\n\n\nexport const TableTr = function ({handleMove, moves}) {\n\n    const handleClick = (e) => {\n        e.preventDefault();\n        handleMove(e.currentTarget.dataset.move);\n    }\n\n    return moves.map((item: IOpeningMove, index) => {\n        return (\n            <tr key={index} onClick={handleClick} data-move={item.move}>\n                <td>\n                    {item.san}\n                </td>\n                <td>{item.weight}</td>\n            </tr>\n        )\n    })\n};\n\nexport type TableTrProps = {\n    moves: IOpeningMove[];\n    handleMove: (move: string, fen: string) => void;\n}\n\nconst StyledExplorerBox = styled.div`\n  flex-grow: 1;\n  \n  overflow: auto;\n  \n  /* for Firefox */\n  min-height: 10rem;\n`\n\nconst StyledTable = styled.table`\n    width: 100%;\n    background: #262626;\n    color: #b3b3b3;\n    font-size: 1.2rem;\n    \n    thead th {\n        background: #262626;\n        font-weight: 500;\n    }\n    \n    tbody td,\n    thead th {\n        padding: .2rem .5rem;\n    }\n    \n    tbody tr {\n        background: #363636;\n        cursor: pointer;\n    }\n    \n    tbody tr:nth-child(odd) {\n        background: #4b4b4b;\n    }\n    \n    tbody tr:hover{\n        background: #7c7c7c;\n    }\n`\nconst OpeningExplorer = memo(() => {\n\n    const moves = useSelector((state: IState) => state.openingMoves, shallowEqual);\n    const fen = useSelector((state: IState) => state.fen, shallowEqual);\n\n    const handleMove = useCallback((move) => {\n        store.dispatch(setMove({\n            from: move.substring(0, 2),\n            to: move.substring(2, 4),\n            id: treeService.getCounter(),\n            fen\n        }));\n        return;\n    }, [fen]);\n\n    if (moves.length === 0) {\n        return null;\n    }\n    return (\n        <StyledExplorerBox>\n            <StyledTable>\n                <thead>\n                <tr>\n                    <th>Move</th>\n                    <th>Weight</th>\n                </tr>\n                </thead>\n                <tbody>\n                <TableTr moves={moves} handleMove={handleMove}/>\n                </tbody>\n            </StyledTable>\n        </StyledExplorerBox>\n    )\n});\n\nexport const SmartOpeningExplorer = OpeningExplorer;\n","import React, {FC, memo} from \"react\";\nimport {IEvaluation, IState, LINE_MAP} from \"../../interfaces\";\nimport {shallowEqual, useSelector} from \"react-redux\";\n\nimport * as Chess from \"chess.js\";\n\nconst ChessInstance = new Chess();\nexport interface Evaluation {\n    score: string;\n    pv: string;\n    mate: string;\n    nodes: string;\n}\n\ninterface EvalHeaderProps {\n    name: string;\n    evaluation: IEvaluation;\n}\n\nexport const EvalHeader = memo((props: EvalHeaderProps) => {\n    return (\n        <div className=\"evaluation-info\">\n            <table>\n                <tbody>\n                <tr>\n                    <td className=\"fs-xs ta-c\">\n                        {props.name}\n                    </td>\n                    <td className=\"fs-xs ta-c\">Nodes: {getNodes(props.evaluation)}</td>\n                    <td className=\"fs-xs ta-c\">Time: {getTime(props.evaluation)}</td>\n                    <td className=\"fs-xs ta-c\">Tb hits: {getTbHits(props.evaluation)}</td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n});\n\ninterface EvalLineProps {\n    evaluation: IEvaluation;\n    fen: string;\n}\n\nconst EvalLine = memo((props: EvalLineProps) => {\n    const time1 = performance.now();\n    const moves = prepareEvaluation(props.evaluation[LINE_MAP.pv], props.fen);\n    const time2 = performance.now();\n    console.log('EvalLine', time2-time1);\n    return (\n        <div className={\"d-f pb-xxs\"}>\n            <div className={\"fs-sm\"}>{getScore(props.evaluation)}</div>\n            <div className=\"pv-holder\">\n                {moves.map((move, index) => {\n                    return (\n                        <span className=\"pv-holder__move\" key={index}>{move}</span>\n                    )\n                })}\n            </div>\n        </div>\n\n    );\n});\n\ninterface SmartEvaluationProps {\n    name: string;\n}\n\nexport const SmartEvaluation = memo((props: SmartEvaluationProps) => {\n        const {fen, evaluations} = useSelector((state: IState) => ({\n            fen: state.fen,\n            evaluations: state.evaluation\n        }), shallowEqual);\n        return <Eval evaluations={evaluations} fen={fen} name={props.name}/>;\n    }\n);\n\ntype EvalProps = {\n    evaluations: IEvaluation[];\n    name: string;\n    fen: string;\n}\nexport const Eval: FC<EvalProps> = memo(({evaluations, name, fen}) => {\n\n        return (\n            <div>\n                {evaluations[0] && <EvalHeader name={name} evaluation={evaluations[0]}/>}\n\n                <div>\n                    {evaluations.map((evaluation) => (\n                        <EvalLine fen={fen} evaluation={evaluation} key={evaluation[LINE_MAP.pv]}/>))}\n                </div>\n            </div>\n        );\n    }\n);\n\n\nexport function getScore(evaluation: IEvaluation) {\n    let score = Number(evaluation[LINE_MAP.score]);\n\n    if (evaluation[LINE_MAP.mate]) {\n        return `#${Number(evaluation[LINE_MAP.mate])}`;\n    }\n\n    return score;\n}\n\nexport function getNodes(evaluation: IEvaluation) {\n    return formatNumber(evaluation[LINE_MAP.nodes]);\n}\n\nexport function getTime(evaluation: IEvaluation) {\n    if (evaluation[LINE_MAP.time]) {\n        const time = Number(evaluation[LINE_MAP.time]) / 1000;\n        return `${time.toFixed(0)}s`;\n    }\n    return 0;\n\n}\n\nfunction getTbHits(evaluation: IEvaluation) {\n    return formatNumber(evaluation[LINE_MAP.tbhits]);\n}\n\n\nfunction formatNumber(num: number | string | undefined) {\n    if (num) {\n        const n = Number(num);\n\n        let _num = 1000000 * 1000;\n        if (n > _num) {\n            const d = n / _num;\n            return `${d.toFixed(2)}B`;\n        }\n\n        if (n > 1000000) {\n            const d = n / 1000000;\n            return `${d.toFixed(2)}M`;\n        }\n\n        if (n > 1000) {\n            const d = n / 1000;\n            return `${d.toFixed(0)}K`;\n        }\n\n        return n;\n\n    }\n    return 0;\n}\n\nexport function splitPv(pv: string): string[] {\n    if(typeof pv !== 'string'){\n        return [];\n    }\n    return pv.split(\" \");\n}\n\nfunction prepareEvaluation(pv: string, fen: string) {\n    // const chess = new Chess(fen);\n    ChessInstance.load(fen);\n\n    const moves = splitPv(pv);\n\n    const newMoves: any = [];\n    if (moves && moves.length > 0) {\n        for (let i = 0; i < moves.length; i++) {\n            const move = moves[i];\n            const newMove = ChessInstance.move(move, {sloppy: true});\n            if (!newMove) {\n                console.log(\"Move doesn't exist\", {move, fen});\n                break;\n            }\n\n            let annotationMove = `${newMove.san}`;\n            // if (newMove.promotion) {\n            //     annotationMove += `=${newMove.promotion}`;\n            // }\n\n            newMoves.push(annotationMove);\n        }\n    }\n\n    return newMoves;\n}","import React, {memo} from \"react\";\nimport {connect} from \"react-redux\";\nimport \"../../assets/css/explorerBox.css\";\nimport store from \"../../store\";\nimport {setMove} from \"./../history/historyReducers\";\nimport {treeService} from \"./../moveTree/tree\";\nimport {ISyzygyMove} from \"./syzygyExplorerReducers\";\n\nfunction renderMoves(move: ISyzygyMove, handleClickMove) {\n    return (\n        <button onClick={handleClickMove} data-move={move.uci} className=\"btn btn-syzygy\">\n            {move.san}\n        </button>\n    )\n}\n\nconst SyzygyExplorer = memo((props: any) => {\n    if (props.syzygy === null) {\n        return null;\n    }\n\n    const moves: ISyzygyMove[] = props.syzygy.moves;\n\n    /**\n     \"wdl\": 2, // (2) win, (1) cursed win, (0) draw, (-1) blessed loss, (-2) loss, (null) unknown\n     \"dtz\": 1, // distance to zeroing or null if unknown\n     \"dtm\": 17, // depth to mate or null if unknown\n     \"insufficient_material\": false,\n     \"moves\": [ // information about legal moves, best first\n     */\n    const winMoves = moves.filter((move: ISyzygyMove) => {\n        return move.wdl === -1 || move.wdl === -2;\n\n    });\n\n    const drawMoves = moves.filter((move: ISyzygyMove) => {\n        return move.wdl === 0\n    });\n\n    const losingMoves = moves.filter((move: ISyzygyMove) => {\n        return move.wdl === 2 || move.wdl === 1;\n    });\n\n    return (\n        <div className=\"explorer-box\">\n\n            <div className=\"data\">\n                {winMoves.length > 0 &&\n                <div className=\"fs-6\">\n                  Win:{winMoves.map((move: ISyzygyMove) => renderMoves(move, props.handleClickMove))}\n                </div>\n                }\n                {drawMoves.length > 0 &&\n                <div className=\"fs-6\">\n                  Draw:{drawMoves.map((move: ISyzygyMove) => renderMoves(move, props.handleClickMove))}\n                </div>\n                }\n                {losingMoves.length > 0 &&\n                <div className=\"fs-6\">\n                  Losing:{losingMoves.map((move: ISyzygyMove) => renderMoves(move, props.handleClickMove))}\n                </div>\n                }\n            </div>\n        </div>\n    )\n});\n\nfunction mapStateToProps(state: any) {\n    return {\n        syzygy: state.syzygy || null,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: (data: any) => {}) {\n    return {\n        handleClickMove(e) {\n            const move = e.currentTarget.dataset.move;\n            const fen = store.getState()[\"fen\"];\n\n            let promotion = \"q\";\n\n            if (move.length > 4) {\n                promotion = move.substring(4, 5);\n            }\n\n            dispatch(setMove({\n                from: move.substring(0, 2),\n                to: move.substring(2, 4),\n                id: treeService.getCounter(),\n                promotion,\n                fen\n            }));\n        }\n    };\n}\n\nexport const SyzygyExplorerSmart = connect(mapStateToProps, mapDispatchToProps)(SyzygyExplorer);","import React, {memo} from \"react\";\nimport {connect} from \"react-redux\";\nimport store from \"../../store\";\nimport {setMove} from \"../history/historyReducers\";\nimport {treeService} from \"../moveTree/tree\";\nimport {IState} from \"../../interfaces\";\nimport {SmallLoading} from \"../Loading\";\nimport \"./gamesDatabaseExplorer.css\";\nimport styled from \"@emotion/styled\";\n\n\nfunction renderRow(props) {\n    return props.response && props.response.games.map((game, index) => {\n        return (\n            <tr key={index}>\n\n                <td>\n                    <span style={{color: \"white\"}}>{game.white} ({game.whiteElo} )</span><br/>\n                    <span style={{color: \"#f1f1f1\"}}>{game.black} ({game.blackElo})</span><br/>\n                    <div className=\"games-database-explorer__line\">{game.fewNextMove.join(\" \")}</div>\n                </td>\n                <td className=\"games-database-explorer__results\">\n                    {game.result}\n                </td>\n            </tr>\n        )\n    })\n}\n\nconst StyledGamesWrapper = styled.div`\n  flex-grow: 1;\n  overflow: auto;\n  \n  /* for Firefox */\n  min-height: 0;\n`\nconst GamesDatabaseExplorer = memo((props: any) => {\n    return (\n\n        <StyledGamesWrapper>\n            <table className=\"games-database-explorer\">\n                <thead>\n                <tr>\n                    <th colSpan={2}>\n                        <span className={\"d-ib pr-sm\"}>Games</span>\n                        <SmallLoading isLoading={props.isLoading}/>\n                    </th>\n                </tr>\n                </thead>\n                <tbody>\n                {props.response && renderRow(props)}\n\n                {!props.isLoading && !props.response && <tr>\n                  <td>No games in database.</td>\n                </tr>}\n                </tbody>\n            </table>\n        </StyledGamesWrapper>\n\n    )\n});\n\nfunction mapStateToProps(state: IState) {\n    return {\n        response: state.gameDatabase.response,\n        isLoading: state.gameDatabase.isLoading,\n        fen: state.fen,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: (data: any) => {}) {\n    return {\n        handleMove(move: string) {\n            const fen = store.getState()[\"fen\"];\n\n            dispatch(setMove({\n                from: move.substring(0, 2),\n                to: move.substring(2, 4),\n                id: treeService.getCounter(),\n                fen\n            }));\n        }\n    };\n}\n\nexport const SmartGamesDatabaseExplorer = connect(mapStateToProps, mapDispatchToProps)(GamesDatabaseExplorer);\n","import React, {FC, memo} from \"react\";\n\nexport const MoveNumber: FC<IMoveNumberProps> = memo(({fen, counter}) => {\n    const tokens = fen.split(/\\s+/);\n    const moveNumber = tokens[5];\n    const isBlack = tokens[1] === \"b\";\n    const className = ` move_num move_num_${counter}`;\n\n    if (!isBlack) {\n        return null;\n    }\n    return (isBlack &&\n      <span\n        key={`move_${counter}`}\n        className={className}\n        id={className}\n      >{moveNumber}.</span>\n    )\n})\n\nexport type IMoveNumberProps = {\n    fen: string;\n    counter: number;\n}","import {Node, NODE_MAP, NodeVariant} from \"../moveTree/tree\";\nimport React, {memo} from \"react\";\nimport {MoveNumber} from \"./moveNumber\";\nimport {FIRST_POSITION} from \"../../contants\";\n\ninterface IVariants {\n    variants: NodeVariant[];\n    counter: number;\n    level: number;\n    lastMoveId: number;\n    handleMoveClick: (e: any) => void;\n}\n\nexport interface IMoves {\n    counter: number;\n    showBracket: boolean;\n    moves: Node[];\n    level: number;\n    handleMoveClick: (e: any) => void;\n    lastMoveId: number;\n}\n\nexport function Variants(props: IVariants) {\n    const variants: any = props.variants.map((variant: NodeVariant, index: number) => {\n        // @ts-ignore\n        const moves = <Moves\n            key={index}\n            counter={props.counter - 1}\n            moves={variant[NODE_MAP.moves]}\n            level={props.level + 1}\n            handleMoveClick={props.handleMoveClick}\n            showBracket={true}\n            lastMoveId={props.lastMoveId}\n        />;\n        return [\n            moves\n        ];\n    });\n\n    if (props.variants.length > 1) {\n        return (\n            <div>{variants}</div>\n        )\n    } else {\n        return variants;\n    }\n}\n\nexport const Moves = memo((props: IMoves) => {\n    let counter = props.counter;\n    return (\n        <div>\n            {props.moves.map((move: Node, moveIndex: number) => {\n                if (move[NODE_MAP.fen] === FIRST_POSITION) {\n                    return null;\n                }\n                const variantsLength: number = move[NODE_MAP.variants].length;\n                const hasVariants: boolean = variantsLength > 0;\n                let className = \"move\";\n                let showLeftBracket = false;\n                let showRightBracket = false;\n\n                if (props.showBracket) {\n                    if (moveIndex === 0) {\n                        showLeftBracket = true;\n                    }\n\n                    if (moveIndex === props.moves.length - 1) {\n                        showRightBracket = true;\n                    }\n                }\n\n                counter++;\n\n                const style:any = {};\n\n                if (move[NODE_MAP.id] === props.lastMoveId) {\n                    style.color = \"#99ff98\";\n                }\n\n                if (hasVariants && variantsLength === 1) {\n\n                }\n\n                className += ` l-${props.level > 1 ? 2 : props.level}`;\n\n                return (\n                    <React.Fragment key={moveIndex}>\n                        <div\n                            className={className}\n                            style={style}\n                            key={moveIndex}\n                            onClick={props.handleMoveClick}\n                            data-id={move[NODE_MAP.id]}\n                        >\n                            {showLeftBracket && \"(\"}\n                            <MoveNumber counter={counter} fen={move[NODE_MAP.fen]}/>\n                            <span>{move[NODE_MAP.shortNotation]}</span>\n                            {showRightBracket && \")\"}\n                        </div>\n\n                        <Variants\n                            key={`variant_${move[NODE_MAP.id]}`}\n                            variants={move[NODE_MAP.variants]}\n                            level={props.level}\n                            lastMoveId={props.lastMoveId}\n                            counter={counter}\n                            handleMoveClick={props.handleMoveClick}\n                        />\n                    </React.Fragment>\n                )\n            })}\n        </div>\n    );\n});","import React, {memo} from \"react\";\nimport {connect} from \"react-redux\";\nimport {setEvaluation, setPosition} from \"../../actions\";\nimport store from \"../../store\";\nimport {batchActions} from \"redux-batched-actions\";\nimport {setSyzygyEvaluation} from \"../syzygyExplorer/syzygyExplorerReducers\";\nimport {NODE_MAP, treeService} from \"../moveTree/tree\";\nimport {Moves} from \"./moves\";\nimport {loadOpeningPosition, setOpeningPosition} from \"../openingExplorer/openingExplorerReducers\";\nimport {lastMoveId} from \"./historyReducers\";\nimport {emitPosition} from \"../../services/sockets/actions\";\nimport {loadGamesFromDatabase} from \"../gamesDatabaseExplorer/gamesDatabaseReducers\";\nimport {IEvaluation, Nullable} from \"../../interfaces\";\nimport styled from \"@emotion/styled\";\n\n\nconst HistoryContainer = memo((props: any) => {\n\n    // @ts-ignore\n    const moves = <Moves\n        moves={props.history} counter={0}\n        level={0}\n        lastMoveId={props.lastMoveId}\n        handleMoveClick={handleMoveClick}\n        showBracket={false}/>;\n\n    return (\n        <HistoryWrapper>\n            {props.history.length > 1 && moves}\n        </HistoryWrapper>\n    )\n});\n\nconst HistoryWrapper = styled.div`\n    font-size: 1.3rem;\n    color: white;\n    background-color: #4b4b4b;\n    padding: 0 .8rem;\n    \n    .move_num {\n        font-size: 1.1rem;\n        color: #cecece;\n    }\n    \n    .move {\n        padding: .1rem .5rem .1rem 0;\n        display: inline-block;\n    }\n    \n    .l-1{\n        font-size: 1rem;\n        color: rgba(170, 165, 170, 0.99);\n    }\n    \n    .l-2{\n        font-size: .9rem;\n        color: rgba(170, 165, 170, 0.99);\n    }\n    \n    \n    .history__subline {\n        padding-left: 1rem;\n        display: block;\n    }\n    \n    .history__subline .move{\n        font-size: 1rem;\n        color: rgba(170, 165, 170, 0.99);\n    }\n    \n    .move__active {\n        color: red;\n    }\n    \n    \n    .history__title {\n        color: white;\n        padding: .6rem;\n    }\n`;\n\n\nfunction handleMoveClick(e: any) {\n    e.preventDefault();\n    const id: number = Number(e.currentTarget.dataset.id);\n\n    const ref = treeService.getReference(id);\n\n    if (ref && ref.node) {\n        const fen: string = ref.node[NODE_MAP.fen];\n        store.dispatch(batchActions([\n            lastMoveId(ref.node[NODE_MAP.id]),\n            setPosition(fen),\n            setEvaluation([]),\n            setSyzygyEvaluation(null),\n            setOpeningPosition([])\n        ]));\n\n        //todo send previous evaluation\n        let previousEvaluation: Nullable<IEvaluation> = null;\n        let evaluation: Nullable<IEvaluation> = null;\n        const evaluations = ref.node[NODE_MAP.evaluation];\n        if (evaluations && evaluations[0]) {\n            evaluation = evaluations[0];\n        }\n\n        // find prevEvaluation\n        const prevMove = treeService.getPrevMove(ref.node[NODE_MAP.id]);\n        if (prevMove) {\n            const prevEvaluations = prevMove[NODE_MAP.evaluation];\n            if (prevEvaluations && prevEvaluations[0]) {\n                previousEvaluation = prevEvaluations[0];\n            }\n        }\n\n        store.dispatch(emitPosition(fen, ref.node[NODE_MAP.move], previousEvaluation, evaluation));\n\n        store.dispatch(loadOpeningPosition(fen));\n        store.dispatch(loadGamesFromDatabase(fen));\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        history: state.history,\n        lastMoveId: state.lastMoveId,\n    }\n}\n\nexport const History = connect(mapStateToProps)(HistoryContainer);\n","import React, {useEffect, useState} from \"react\";\nimport {pairValues, parseResult} from \"../../libs/parseStockfishResults\";\nimport {useInterval} from \"../hooks/useInterval\";\nimport {IEvaluation, Undef} from \"interfaces\";\n\nlet engineMsgBuffer = {};\n\nfunction collectEngineData(msg: MessageEvent) {\n    const multipv = pairValues(\"multipv\", msg.data);\n    engineMsgBuffer[multipv] = msg.data;\n}\n\nexport function useStockFishWorker(lastFen: string, movesLine: string): [Undef<Worker>, IEvaluation[], any] {\n    const [worker, setWorker] = useState<Worker>();\n    const [error, setError] = useState<any>();\n    const [evaluations, setEvaluations] = useState<IEvaluation[]>([]);\n    const [workerConfig, setWorkerConfig] = useState({\n        threads: 1,\n        delay: 10 * 1000,\n        hashSize: 32,\n        multiPv: 3\n    });\n\n    useInterval(() => {\n        console.log(\"Time\", performance.now() / 1000);\n        const values = Object.keys(engineMsgBuffer).map((key) => (engineMsgBuffer[key]));\n        console.log({values});\n        const evaluationStringFromEngine = values.join(\"\\n\");\n\n        // const data = JSON.stringify(evaluationStringFromEngine);\n        const result = parseResult(evaluationStringFromEngine, lastFen);\n\n        if (result.length > 0) {\n            setEvaluations(result);\n        }\n    }, 3000);\n\n    // const onResultCallback = useCallback((msg: MessageEvent) => {\n    //     engineMsgBuffer.push(msg.data);\n    //     debounceMsg(lastFen, setEvaluations);\n    // }, [lastFen, setEvaluations]);\n\n    useEffect(() => {\n        if (!worker) {\n            const path: string = \"/engines/\";\n            try {\n\n                if (!window.Worker) {\n                    throw new Error(\"Worker is not supported\");\n                }\n                const instance = new window.Worker(isWasmSupported() ? `${path}stockfish.wasm.js` : `${path}stockfish.js`);\n\n                instance.addEventListener(\"message\", collectEngineData);\n                instance.postMessage(\"uci\");\n                instance.postMessage(\"isready\");\n                // instance.postMessage(`setoption name Threads value ${this.config.threads}`); // do not allow this line, then is 100% cpu\n                instance.postMessage(`setoption name Hash value ${workerConfig.hashSize}`);\n                instance.postMessage(`setoption name UCI_AnalyseMode value false`);\n                instance.postMessage(\"setoption name Ponder value false\");\n                instance.postMessage(`setoption name multipv value ${workerConfig.multiPv}`);\n                instance.postMessage(`setoption name Contempt value 24`);\n\n                setWorker(instance);\n            } catch (e) {\n                setError(e);\n            }\n        }\n    }, [collectEngineData, worker, workerConfig.hashSize, workerConfig.multiPv]);\n\n    useEffect(() => {\n        if (worker && lastFen) {\n            worker.postMessage(\"stop\");\n            worker.postMessage(`position fen ${lastFen} moves ${movesLine}`);\n            worker.postMessage(`go movetime ${workerConfig.delay}`);\n        }\n\n        return function cleanup() {\n            if (worker) {\n                worker.postMessage(\"stop\");\n                worker.terminate();\n                console.log(\"worker terminated\");\n            }\n        };\n    }, [lastFen, movesLine, worker, workerConfig]);\n    return [worker, evaluations, error];\n}\n\nfunction isWasmSupported(): boolean {\n    return typeof (window as any).WebAssembly === \"object\" && (window as any).WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\n}","import React, {useEffect, useRef} from \"react\";\n\ntype IntervalFunction = () => (unknown | void)\n\nexport function useInterval(callback: IntervalFunction, delay: number) {\n    const savedCallback = useRef<IntervalFunction | null>(null);\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current && savedCallback.current();\n        }\n\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, {memo, useState} from \"react\";\nimport Toggle from \"react-toggle\"\nimport {useStockFishWorker} from \"./useStockFish\";\nimport {shallowEqual, useSelector} from \"react-redux\";\nimport {IState} from \"../../interfaces\";\nimport {treeService} from \"../moveTree/tree\";\nimport {Eval} from \"./evaluation\";\n\ntype ControllerProps = {}\n\nexport const SmartStockFish = memo((props: ControllerProps) => {\n    const [state, setState] = useState({\n        doEvaluation: false\n    });\n\n    const {lastFen, lastMoveId} = useSelector((state: IState) => ({\n        lastFen: state.fen,\n        lastMoveId: state.lastMoveId\n    }), shallowEqual);\n\n    return (\n        <div>\n            <label>\n                <Toggle\n                    defaultChecked={state.doEvaluation}\n                    icons={false}\n                    onChange={() => {\n                        setState({\n                                doEvaluation: !state.doEvaluation\n                            }\n                        )\n                    }}\n                />\n\n                <span className=\"react-toggle--label\">Local</span>\n            </label>\n\n            {state.doEvaluation && <OfflineStockFishEvaluation lastMoveId={lastMoveId} lastFen={lastFen}/>}\n        </div>\n    );\n});\n\ntype OfflineStockFishEvaluationProps = {\n    lastMoveId: number;\n    lastFen: string;\n}\nconst OfflineStockFishEvaluation = memo((props: OfflineStockFishEvaluationProps) => {\n    const movesLine = treeService.getMoveLine(props.lastMoveId);\n    const [worker, evaluations] = useStockFishWorker(props.lastFen, movesLine);\n    console.log({worker, evaluations});\n\n    return (\n        <div>\n            {evaluations && <Eval\n              evaluations={evaluations}\n              fen={props.lastFen}\n              name={\"Local\"}\n            />}\n        </div>\n    )\n})","import React, {FC, memo} from \"react\";\nimport {shallowEqual, useSelector} from \"react-redux\";\nimport {SmartOpeningExplorer} from \"./openingExplorer/openingExplorer\";\nimport {SmartEvaluation} from \"./evaluation/evaluation\";\nimport {SyzygyExplorerSmart} from \"./syzygyExplorer/syzygyExplorer\";\nimport {SmartGamesDatabaseExplorer} from \"./gamesDatabaseExplorer/gamesDatabaseExplorer\";\nimport {History} from \"./history/history\";\nimport {PanelTabType} from \"./infoPanel/infoPanelReducers\";\nimport {SmartStockFish} from \"./evaluation/offlineStockfishEvaluation\";\nimport styled from \"@emotion/styled\";\nimport {IState} from \"interfaces\";\n\ninterface IEvaluation {\n    score: string;\n    pv: string;\n    mate: string;\n    nodes: string;\n}\n\n\ntype PanelProps = {}\nconst Panel: FC<PanelProps> = memo(() => {\n    const panelTab = useSelector((state: IState) => {\n        return state.panelTab;\n    }, shallowEqual);\n\n    return (\n        <React.Fragment>\n\n            {panelTab === PanelTabType.INFO_TAB && <History/>}\n            {panelTab === PanelTabType.EVALUATION_TAB && (\n                <div>\n                    <SmartStockFish/>\n                    <SmartEvaluation name={\"Cloud\"}/>\n                </div>\n            )}\n            {panelTab === PanelTabType.BOOK_TAB && (\n                <Wrapper>\n                    <div className=\"section\">\n                        <SmartOpeningExplorer/>\n                        <SmartGamesDatabaseExplorer/>\n                        <SyzygyExplorerSmart/>\n                    </div>\n                </Wrapper>\n            )}\n\n\n            {/*<div className=\"app__status\">*/}\n            {/*    <div className=\"app__pgn\">{state.pgn}</div>*/}\n            {/*    <div className=\"app__fen\">{state.fen}</div>*/}\n            {/*    <div className=\"app__opening\">{props.status}</div>*/}\n            {/*</div>*/}\n\n\n        </React.Fragment>\n    )\n});\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  \n  display: flex;\n  flex-direction: column;\n\n.section {\n  flex-grow: 1;\n  \n  display: flex;\n  flex-direction: column;\n  \n  /* for Firefox */\n  min-height: 0;\n}\n\n.scrollable-content {\n  background: white;\n  flex-grow: 1;\n  \n  overflow: auto;\n  \n  /* for Firefox */\n  min-height: 0;\n}\n\n`\n\nexport const SmartPanel = Panel;\n","import React, {memo} from \"react\";\nimport {connect} from \"react-redux\";\nimport { MenuBook, Psychology, Info } from \"@emotion-icons/material\";\nimport store from \"../../store\";\nimport {PanelTabType, setPanelTab} from \"./infoPanelReducers\";\nimport {IEvaluation, LINE_MAP} from \"../../interfaces\";\nimport {getNodes, getScore, getTime} from \"../evaluation/evaluation\";\nimport {IOnMove} from \"../../actions\";\nimport styled from \"@emotion/styled\";\n\nconst classNames = require(\"classnames\");\n\nconst InfoPanel = memo((props: InfoPanelProps) => {\n    return (\n        <div className={'d-f'}>\n            <>\n                {renderButton(PanelTabType.INFO_TAB, Info, props.panelTab)}\n                {renderButton(PanelTabType.EVALUATION_TAB, Psychology, props.panelTab)}\n                {renderButton(PanelTabType.BOOK_TAB, MenuBook, props.panelTab)}\n            </>\n\n            {renderScore(props)}\n        </div>\n    )\n});\n\nfunction handleButton(event: any) {\n    const tabId = event.currentTarget.dataset.tab;\n    store.dispatch(setPanelTab(tabId));\n}\n\nfunction renderButton(id: string, IconComponent: typeof Info, panelTab: string) {\n    const classname = classNames('btn btn-panel',{\n        is_active: panelTab === id\n    });\n    return (\n        <button onClick={handleButton} data-tab={id} className={classname}>\n            <IconComponent color={'white'} height={16} width={16}/>\n        </button>\n    )\n}\n\nconst Container = styled.div`\n    padding: .2rem .4rem;\n`;\n\nconst Column = styled.span`\n    display: inline-block;\n    padding: 0 .5rem;\n`;\n\nfunction renderScore(props: InfoPanelProps) {\n    if (props.evaluation.length === 0) {\n        return null;\n    }\n    const evaluation: IEvaluation = props.evaluation[0];\n\n    return (\n        <Container>\n                <Column>\n                    {getScore(evaluation)}\n                    {!evaluation[LINE_MAP.mate] &&\n                    <span className=\"fs-xs fw-r\">/{evaluation[LINE_MAP.depth]}</span>}\n                </Column>\n            <Column>n: {getNodes(evaluation)}</Column>\n            <Column>t: {getTime(evaluation)}</Column>\n\n        </Container>\n    )\n\n}\n\ninterface InfoPanelProps {\n    fen: string;\n    evaluation: IEvaluation[];\n    isFlip: boolean;\n    onMove: IOnMove;\n    isOnline: boolean;\n    panelTab: string;\n    settings: string;\n}\n\nexport const SmartInfoPanel = connect((state:any) => ({\n    fen: state.fen,\n    evaluation: state.evaluation,\n    onMove: state.onMove,\n    isFlip: state.isFlip,\n    isOnline: state.isOnline,\n    panelTab: state.panelTab,\n    settings: state.settings\n}))(InfoPanel);","export function toDests(chess: any) {\n    const dests:any = {};\n    chess.SQUARES.forEach(s => {\n        const ms = chess.moves({square: s, verbose: true});\n        if (ms.length) dests[s] = ms.map(m => m.to);\n    });\n    return dests;\n}\n\nexport function toColor(chess: any) {\n    return (chess.turn() === \"w\") ? \"white\" : \"black\";\n}\n\n","import React from \"react\";\nimport {IOnMove} from \"../../actions\";\nimport * as classnames from \"classnames\";\nimport {isYourMove} from \"../../tools/isYourMove\";\n\ninterface OnMoveIndicationProps {\n    isFlip: boolean;\n    onMove: IOnMove\n}\n\nexport const OnMoveIndication = (props: OnMoveIndicationProps) => {\n    const className = classnames(\"on-move-indicator pos-a\", {\n        \"on-move-indicator--top\": !isYourMove(props.onMove, props.isFlip)\n    });\n\n    return (\n        <div className={className}/>\n    )\n}","import {IOnMove} from \"../actions\";\n\nexport function isYourMove(onMove: IOnMove, isFlip: boolean) {\n    if (onMove === IOnMove.WHITE && !isFlip) {\n        return true;\n    }\n\n    return Boolean(onMove === IOnMove.BLACK && isFlip);\n}","import {useCallback, useState} from \"react\";\nimport {Nullable} from \"../../interfaces\";\n\n\nexport function useRefCallback<T>(): [Nullable<T>, (node: T) => void] {\n    const [node, setNode] = useState<Nullable<T>>(null);\n    const setRef = useCallback((element: T) => {\n        setNode(element);\n    }, []);\n\n    return [node, setRef];\n}\n","import * as Chess from \"chess.js\";\n\nexport function getMoveFen(previousFen: string, move: string) {\n\n    const promotion = move.length > 4 && move.substring(4, 5);\n    const from = move.substring(0, 2);\n    const to = move.substring(2, 4);\n    const chess = new Chess(previousFen);\n    const isMove = chess.move({\n        from,\n        to,\n        promotion\n    });\n\n    if (!isMove) {\n        throw new Error(`Invalid move ${move}`);\n    }\n\n    const fen = chess.fen();\n\n    return {\n        fen,\n        from,\n        to,\n        promotion\n    }\n}","import store from \"../store\";\nimport {IOnMove} from \"../actions\";\nimport {IOpeningMove} from \"../components/openingExplorer/openingExplorerReducers\";\nimport {treeService} from \"../components/moveTree/tree\";\nimport {setMove} from \"../components/history/historyReducers\";\nimport {IEvaluation, LINE_MAP} from \"../interfaces\";\nimport {splitPv} from \"../components/evaluation/evaluation\";\nimport {getMoveFen} from \"./moveFen\";\nimport debounce from 'lodash/debounce';\n\n\nexport class AutoplayService {\n    private store;\n\n    constructor() {\n        this.store = store;\n        const debounceListener = debounce(this.storeListener, 300);\n        store.subscribe(debounceListener);\n    }\n\n    private storeListener = () => {\n        const state: any = this.store.getState();\n\n        // check if autoplay is enabled\n        if (state.autoplay && state.loading === false) {\n            // check who is on move\n            if (AutoplayService.isAiOnMove(state)) {\n                const openingMove = this.getOpeningMove(state.openingMoves);\n                if (openingMove) {\n                    this.dispatchOpeningMove(openingMove, state.fen);\n                } else if (state.evaluation.length > 0) {\n                    console.log(\"check engine evaluation\");\n                    this.dispatchEngineMove(state.evaluation[0], state.fen);\n                }\n\n            }\n        }\n    }\n\n    private dispatchOpeningMove(openingMove: IOpeningMove, fen: string) {\n\n        const moveObj = getMoveFen(fen, openingMove.move);\n\n        this.store.dispatch(setMove({\n            from: moveObj.from,\n            to: moveObj.to,\n            id: treeService.getCounter(),\n            fen: fen\n        }));\n    }\n\n\n    private isScoreHigh(evaluation: IEvaluation) {\n\n        const time = Number(evaluation[LINE_MAP.time]) / 1000;\n        const score = Number(evaluation[LINE_MAP.score]);\n        const toMate = Math.abs(Number(evaluation[LINE_MAP.mate]));\n\n        if (score > 8 && time > 3) {\n            return true;\n        }\n\n        if (score > 7 && time > 4) {\n            return true;\n        }\n\n        if (score > 6 && time > 5) {\n            return true;\n        }\n\n        if (score > 5 && time > 7) {\n            return true;\n        }\n\n        if (score > 4 && time > 8) {\n            return true;\n        }\n\n        if (score > 3 && time > 10) {\n            return true;\n        }\n\n        if (toMate > 0 && toMate < 6) {\n            return true;\n        }\n\n        if (toMate > 0 && toMate < 11 && time > 3) {\n            return true;\n        }\n\n        if (toMate > 0 && toMate < 18 && time > 6) {\n            return true;\n        }\n\n\n        return false;\n    }\n\n    private dispatchEngineMove(evaluation: IEvaluation, fen: string) {\n\n        const isImported = evaluation[LINE_MAP.import];\n        const pv = evaluation[LINE_MAP.pv];\n        const nodes = Number(evaluation[LINE_MAP.nodes]);\n        // const requiredTime = 20 * 1000;// @todo based on level\n\n        if (this.isScoreHigh(evaluation)) {\n            console.log(\"isScoreHigh\", {evaluation});\n        }\n\n        // console.log({evaluation});\n        if(typeof pv !== 'string'){\n            debugger;\n        }\n        if (typeof pv === 'string' &&\n            (isImported === 1\n            || nodes > 80 * 1000 * 1000\n            || this.isScoreHigh(evaluation))\n        ) {\n\n            const moves = splitPv(pv);\n            const firstMove = moves[0];\n\n            // console.log(\"dispatchEngineMove\", {firstMove, time});\n            const moveObj = getMoveFen(fen, firstMove);\n\n            this.store.dispatch(setMove({\n                from: moveObj.from,\n                to: moveObj.to,\n                id: treeService.getCounter(),\n                fen: fen\n            }));\n        }\n    }\n\n    private getOpeningMove(openingMoves: IOpeningMove[]) {\n        if (openingMoves.length === 0) {\n            return null;\n        }\n\n        const sumWeight: Number = openingMoves.reduce((sum: number, move: IOpeningMove) => {\n            return sum + move.weight;\n        }, 0);\n\n        const average: Number = Math.ceil(Number(sumWeight) / openingMoves.length);\n\n        const possibleMoves = openingMoves.filter((move: IOpeningMove) => move.weight >= average);\n        const selectedMove = this.randomItem(possibleMoves);\n\n        return selectedMove;\n\n    }\n\n    private randomItem(items: any[]) {\n        return items[Math.floor(Math.random() * items.length)];\n    }\n\n    static isAiOnMove(state): boolean {\n        if ((state.onMove === IOnMove.WHITE && state.isFlip)\n            ||\n            (state.onMove === IOnMove.BLACK && !state.isFlip)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n}","import {useRefCallback} from \"../hooks/useRefCallback\";\nimport {useCallback, useEffect, useState} from \"react\";\nimport {Chessground} from \"chessground\";\nimport {toDests} from \"../../libs/chessboardUtils\";\nimport {AutoplayService} from \"../../libs/autoplayEngine\";\nimport * as Chess from \"chess.js\";\nimport {Api} from \"chessground/api\";\nimport store from \"../../store\";\nimport {setMove} from \"../history/historyReducers\";\nimport {treeService} from \"../moveTree/tree\";\nimport {IUser} from \"../../reducers\";\nimport {SessionManagerService} from \"../../services/sessionManager\";\nimport {ApiManagerService} from \"../../services/apiManager\";\nimport throttle from \"lodash/throttle\";\nimport debounce from \"lodash/debounce\";\nimport {Undef} from \"interfaces\";\n\nconst playOtherSide = (cg: Api) => {\n    return (orig, dest) => {\n        store.dispatch(setMove({\n            from: orig,\n            to: dest,\n            id: treeService.getCounter(),\n            fen: (cg.state as any).fen\n        }));\n    };\n}\n\nexport function useBoard(): [(node: HTMLDivElement) => void, Undef<Api>] {\n    const [node, setRef] = useRefCallback<HTMLDivElement>();\n    const [board, setBoard] = useState<Api>();\n\n    useEffect(() => {\n        if (node && !board) {\n            const chessGround = Chessground(node, {\n                orientation: \"white\",\n                highlight: {\n                    check: true,\n                    lastMove: true\n                },\n                addPieceZIndex: true,\n                movable: {\n                    free: false,\n                    dests: toDests(new Chess())\n                }\n            });\n\n            chessGround.redrawAll();\n\n            chessGround.set({\n                movable: {\n                    events: {\n                        after: playOtherSide(chessGround)\n                    }\n                }\n            });\n\n            setBoard(chessGround);\n\n            initHistorySaving();\n            new AutoplayService();\n        }\n    }, [board, node]);\n\n    const onResize = useCallback(() => {\n        return debounce(() => {\n            board?.redrawAll();\n        }, 100);\n    }, [board]);\n\n    useEffect(() => {\n        if (board) {\n            window.addEventListener(\"resize\", onResize(), true);\n            return () => {\n                window.addEventListener(\"resize\", onResize(), true);\n            }\n        }\n\n    }, [board, onResize]);\n\n    return [\n        setRef,\n        board\n    ]\n\n}\n\n\n\n\nfunction initHistorySaving() {\n    // auto saving for history\n    let previousHash: string = treeService.getStateHash();\n\n    const saveHistory = throttle(() => {\n        const history = store.getState()[\"history\"];\n        const user: IUser = store.getState()[\"user\"];\n        const token = SessionManagerService.getToken();\n        if (user.lastGameId && token) {\n            ApiManagerService.saveGame(history, user.lastGameId, token);\n        }\n    }, 1000);\n\n    function handleHistoryChange() {\n\n        let currentHash = treeService.getStateHash();\n\n        if (previousHash !== currentHash) {\n            saveHistory();\n        }\n        previousHash = currentHash;\n    }\n\n    store.subscribe(handleHistoryChange);\n}","import React, {memo, useEffect} from \"react\";\nimport {shallowEqual, useSelector} from \"react-redux\";\nimport store from \"../../store\";\nimport * as Chess from \"chess.js\";\nimport {toColor, toDests} from \"../../libs/chessboardUtils\";\nimport {OnMoveIndication} from \"./onMoveIndication\";\nimport {PromotingDialog} from \"./promotingDialog\";\nimport {setMove} from \"../history/historyReducers\";\nimport {setPromotionDialog} from \"./promotingDialogReducers\";\nimport {IOnMove, setStatus, setWhoIsOnMove} from \"../../actions\";\nimport {useBoard} from \"./board\";\nimport {IState} from \"../../interfaces\";\nimport {Key} from \"chessground/types\";\n\nconst handlePromotePiece = (e: any) => {\n    e.preventDefault();\n    const propsSetMove: any = {...store.getState()[\"promotionDialog\"][\"requestedParams\"]};\n    propsSetMove.promotion = e.currentTarget.dataset.piece;\n    store.dispatch(setPromotionDialog({isOpen: false}));\n    store.dispatch(setMove(propsSetMove));\n};\n\nfunction updateStatus(chess) {\n    const moveColor = chess.turn() === \"b\" ? \"Black\" : \"White\";\n\n    let status = \"\";\n    // checkmate?\n    if (chess.in_checkmate() === true) {\n        status = \"Game over, \" + moveColor + \" is in checkmate.\";\n    } else if (chess.in_draw() === true) { // draw?\n        status = \"Game over, drawn position\";\n    } else { // game still on\n        // status = moveColor + ' to move';\n        // check?\n        if (chess.in_check() === true) {\n            status += moveColor + \" is in check\";\n        }\n    }\n\n    store.dispatch(setStatus(status));\n    store.dispatch(setWhoIsOnMove(chess.turn() === \"b\" ? IOnMove.BLACK : IOnMove.WHITE));\n}\n\nconst possibleKeys = ['a0' , 'a1' , 'b1' , 'c1' , 'd1' , 'e1' , 'f1' , 'g1' , 'h1' , 'a2' , 'b2' , 'c2' , 'd2' , 'e2' , 'f2' , 'g2' , 'h2' , 'a3' , 'b3' , 'c3' , 'd3' , 'e3' , 'f3' , 'g3' , 'h3' , 'a4' , 'b4' , 'c4' , 'd4' , 'e4' , 'f4' , 'g4' , 'h4' , 'a5' , 'b5' , 'c5' , 'd5' , 'e5' , 'f5' , 'g5' , 'h5' , 'a6' , 'b6' , 'c6' , 'd6' , 'e6' , 'f6' , 'g6' , 'h6' , 'a7' , 'b7' , 'c7' , 'd7' , 'e7' , 'f7' , 'g7' , 'h7' , 'a8' , 'b8' , 'c8' , 'd8' , 'e8' , 'f8' , 'g8' , 'h8'];\nfunction isBoardKey(key: string): key is Key {\n    return possibleKeys.includes(key);\n}\nexport const SmartAwesomeChessboard = memo((props: IChessboardProps) => {\n    const reduxState = useSelector((state: IState) => {\n        return {\n            fen: state.fen,\n            onMove: state.onMove,\n            history: state.history,\n            isFlip: state.isFlip,\n            lastMoveId: state.lastMoveId,\n            lastMove: state.lastMove,\n            promotionDialog: state.promotionDialog,\n            evaluation: state.evaluation,\n        }\n    }, shallowEqual);\n    const {isFlip, fen, lastMove, evaluation, promotionDialog, onMove} = reduxState;\n    const {from, to} = lastMove;\n    const [setRef, board] = useBoard();\n    useEffect(() => {\n        if (board) {\n            board.set({\n                orientation: isFlip ? \"black\" : \"white\"\n            });\n        }\n    }, [board, isFlip]);\n\n    useEffect(() => {\n\n        if (board) {\n            const chess = new Chess(fen);\n            const options: any = {\n                check: chess.in_check(),\n                turnColor: toColor(chess),\n                highlight: {\n                    check: true,\n                    lastMove: true,\n                    selected: true,\n                },\n                movable: {\n                    color: toColor(chess),\n                    dests: toDests(chess)\n                },\n                fen\n            };\n\n            if (from && to) {\n                options.lastMove = [from, to];\n            }\n            board.set(options);\n            console.log('board.redrawAll');\n            board.redrawAll();\n            updateStatus(chess);\n        }\n    }, [board, fen, from, to]);\n\n    useEffect(() => {\n        if (board && evaluation.length > 0) {\n            const move = evaluation[0].p;\n            if(typeof move === 'string'){\n                const from = move.substring(0, 2);\n                const to = move.substring(2, 4);\n\n                if(isBoardKey(from) && isBoardKey(to)){\n                    board.setShapes([{\n                        orig: from,\n                        dest: to,\n                        brush: \"paleGreen\"\n                    }])\n                }\n            }\n        }\n    }, [board, evaluation])\n\n\n    return (\n        <div className=\"brown pos-r\">\n            <OnMoveIndication onMove={onMove} isFlip={isFlip}/>\n\n            <PromotingDialog\n                {...promotionDialog}\n                onMove={onMove}\n                handleOnClick={handlePromotePiece}\n            />\n\n            <div id=\"awesome-chessboard\" className=\"is2d\" ref={setRef}/>\n        </div>\n    );\n});\n\n\nexport interface IChessboardProps {\n\n}\n","import {useEffect, useState} from \"react\";\n\nexport enum Orientation {\n    'landscape'='landscape',\n    'portrait'='portrait',\n}\nfunction getOrientation(){\n    if(window.innerWidth > window.innerHeight){\n        return Orientation.landscape\n    }\n\n    return Orientation.portrait;\n}\nexport const useScreenOrientation = () => {\n    const [orientation, setOrientation] = useState(getOrientation())\n\n    const updateOrientation = event => {\n        setOrientation(getOrientation())\n    }\n\n    useEffect(() => {\n        window.addEventListener('resize', updateOrientation)\n        return () => {\n            window.removeEventListener('resize', updateOrientation)\n        }\n    }, [])\n\n    return orientation\n}","import React, {memo} from \"react\";\nimport {SmartPanel} from \"../components/Panel\";\nimport {MenuWithRouter} from \"../components/menu/menu\";\nimport {SmartInfoPanel} from \"../components/infoPanel/infoPanel\";\nimport {SmartAwesomeChessboard} from \"../components/chessboard/chessboardController\";\nimport styled from \"@emotion/styled\";\nimport {useRefCallback} from \"components/hooks/useRefCallback\";\nimport useResizeObserver from \"use-resize-observer\";\nimport {useScreenOrientation} from \"hooks/useScreenOrientation\";\n\n\nconst Column = styled.div`\n    flex: 50%;\n`;\n\nexport const ChessboardPage = memo(() => {\n    const [wrapperEl, setWrapperRef] = useRefCallback<HTMLDivElement>();\n    const [infoWrapperEl, setInfoWrapperRef] = useRefCallback<HTMLDivElement>();\n    const orientation = useScreenOrientation();\n    console.log(\"orientation\", orientation);\n    const isLandscape = window.innerWidth > window.innerHeight;\n\n    const {ref, width = 1, height = 1} = useResizeObserver<HTMLDivElement>();\n    console.log(\"window.innerHeight\", window.innerHeight);\n    console.log({width, height});\n\n    if (orientation === \"landscape\") {\n        return (\n            <div\n                ref={setWrapperRef}\n                className={\"d-f\"}\n            >\n                <Column>\n                    <SmartAwesomeChessboard/>\n                </Column>\n\n                <Column>\n                    <SmartInfoPanel/>\n                    <SmartPanel/>\n\n                    <MenuWithRouter\n                        showMainMenu={true}\n                        showFlip={true}\n                        showUndo={true}\n                        showRedo={true}\n                        showAutoplay={true}\n                    />\n                </Column>\n            </div>\n        );\n    }\n    return (\n        <StyledWrapper\n            ref={setWrapperRef}\n            chessboardHeight={isLandscape ? window.innerHeight : window.innerWidth}\n            appHeight={window.innerHeight}\n        >\n            <SmartAwesomeChessboard/>\n            <SmartInfoPanel/>\n\n            <div ref={ref} style={{overflow: \"hidden\"}}>\n                <div style={{height}}>\n                    <SmartPanel/>\n                </div>\n            </div>\n\n            <MenuWithRouter\n                showMainMenu={true}\n                showFlip={true}\n                showUndo={true}\n                showRedo={true}\n                showAutoplay={true}\n            />\n        </StyledWrapper>\n\n    );\n});\n\nexport default ChessboardPage;\n\nconst StyledWrapper = styled.div`\n    height: ${(props: StyledWrapperProps) => (`${props.appHeight}px`)};\n    display: grid;\n    grid-template-rows: ${(props: StyledWrapperProps) => (`${props.chessboardHeight}px`)} 23px auto 30px;\n`;\n\ntype StyledWrapperProps = {\n    appHeight: number;\n    chessboardHeight: number;\n}\n\n\n"],"sourceRoot":""}